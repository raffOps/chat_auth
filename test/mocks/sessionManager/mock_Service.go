// Code generated by mockery v2.42.1. DO NOT EDIT.

package sessionManager

import (
	context "context"

	auth "github.com/raffops/auth/internal/app/auth/model"

	errs "github.com/raffops/chat/pkg/errs"

	grpc "google.golang.org/grpc"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// CheckGrpcSession provides a mock function with given fields: srv, ss, info, handler
func (_m *Service) CheckGrpcSession(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {
	ret := _m.Called(srv, ss, info, handler)

	if len(ret) == 0 {
		panic("no return value specified for CheckGrpcSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, grpc.ServerStream, *grpc.StreamServerInfo, grpc.StreamHandler) error); ok {
		r0 = rf(srv, ss, info, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CheckGrpcSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckGrpcSession'
type Service_CheckGrpcSession_Call struct {
	*mock.Call
}

// CheckGrpcSession is a helper method to define mock.On call
//   - srv interface{}
//   - ss grpc.ServerStream
//   - info *grpc.StreamServerInfo
//   - handler grpc.StreamHandler
func (_e *Service_Expecter) CheckGrpcSession(srv interface{}, ss interface{}, info interface{}, handler interface{}) *Service_CheckGrpcSession_Call {
	return &Service_CheckGrpcSession_Call{Call: _e.mock.On("CheckGrpcSession", srv, ss, info, handler)}
}

func (_c *Service_CheckGrpcSession_Call) Run(run func(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler)) *Service_CheckGrpcSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(grpc.ServerStream), args[2].(*grpc.StreamServerInfo), args[3].(grpc.StreamHandler))
	})
	return _c
}

func (_c *Service_CheckGrpcSession_Call) Return(_a0 error) *Service_CheckGrpcSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CheckGrpcSession_Call) RunAndReturn(run func(interface{}, grpc.ServerStream, *grpc.StreamServerInfo, grpc.StreamHandler) error) *Service_CheckGrpcSession_Call {
	_c.Call.Return(run)
	return _c
}

// CheckRestSession provides a mock function with given fields: next, roles
func (_m *Service) CheckRestSession(next http.HandlerFunc, roles []auth.RoleId) http.HandlerFunc {
	ret := _m.Called(next, roles)

	if len(ret) == 0 {
		panic("no return value specified for CheckRestSession")
	}

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func(http.HandlerFunc, []auth.RoleId) http.HandlerFunc); ok {
		r0 = rf(next, roles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// Service_CheckRestSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRestSession'
type Service_CheckRestSession_Call struct {
	*mock.Call
}

// CheckRestSession is a helper method to define mock.On call
//   - next http.HandlerFunc
//   - roles []auth.RoleId
func (_e *Service_Expecter) CheckRestSession(next interface{}, roles interface{}) *Service_CheckRestSession_Call {
	return &Service_CheckRestSession_Call{Call: _e.mock.On("CheckRestSession", next, roles)}
}

func (_c *Service_CheckRestSession_Call) Run(run func(next http.HandlerFunc, roles []auth.RoleId)) *Service_CheckRestSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.HandlerFunc), args[1].([]auth.RoleId))
	})
	return _c
}

func (_c *Service_CheckRestSession_Call) Return(_a0 http.HandlerFunc) *Service_CheckRestSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CheckRestSession_Call) RunAndReturn(run func(http.HandlerFunc, []auth.RoleId) http.HandlerFunc) *Service_CheckRestSession_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSession provides a mock function with given fields: ctx, userId, payload
func (_m *Service) CreateSession(ctx context.Context, userId string, payload map[string]interface{}) (string, errs.ChatError) {
	ret := _m.Called(ctx, userId, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 string
	var r1 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) (string, errs.ChatError)); ok {
		return rf(ctx, userId, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) string); ok {
		r0 = rf(ctx, userId, payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) errs.ChatError); ok {
		r1 = rf(ctx, userId, payload)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.ChatError)
		}
	}

	return r0, r1
}

// Service_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type Service_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - payload map[string]interface{}
func (_e *Service_Expecter) CreateSession(ctx interface{}, userId interface{}, payload interface{}) *Service_CreateSession_Call {
	return &Service_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, userId, payload)}
}

func (_c *Service_CreateSession_Call) Run(run func(ctx context.Context, userId string, payload map[string]interface{})) *Service_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *Service_CreateSession_Call) Return(_a0 string, _a1 errs.ChatError) *Service_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CreateSession_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}) (string, errs.ChatError)) *Service_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// FinishSession provides a mock function with given fields: ctx, id
func (_m *Service) FinishSession(ctx context.Context, sessionId string) errs.ChatError {
	ret := _m.Called(ctx, sessionId)

	if len(ret) == 0 {
		panic("no return value specified for FinishSession")
	}

	var r0 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string) errs.ChatError); ok {
		r0 = rf(ctx, sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.ChatError)
		}
	}

	return r0
}

// Service_FinishSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishSession'
type Service_FinishSession_Call struct {
	*mock.Call
}

// FinishSession is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Service_Expecter) FinishSession(ctx interface{}, id interface{}) *Service_FinishSession_Call {
	return &Service_FinishSession_Call{Call: _e.mock.On("FinishSession", ctx, id)}
}

func (_c *Service_FinishSession_Call) Run(run func(ctx context.Context, id string)) *Service_FinishSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_FinishSession_Call) Return(_a0 errs.ChatError) *Service_FinishSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_FinishSession_Call) RunAndReturn(run func(context.Context, string) errs.ChatError) *Service_FinishSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields: ctx, method
func (_m *Service) GetRoles(ctx context.Context, method string) ([]auth.RoleId, errs.ChatError) {
	ret := _m.Called(ctx, method)

	if len(ret) == 0 {
		panic("no return value specified for GetRoles")
	}

	var r0 []auth.RoleId
	var r1 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]auth.RoleId, errs.ChatError)); ok {
		return rf(ctx, method)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []auth.RoleId); ok {
		r0 = rf(ctx, method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]auth.RoleId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errs.ChatError); ok {
		r1 = rf(ctx, method)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.ChatError)
		}
	}

	return r0, r1
}

// Service_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type Service_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
func (_e *Service_Expecter) GetRoles(ctx interface{}, method interface{}) *Service_GetRoles_Call {
	return &Service_GetRoles_Call{Call: _e.mock.On("GetRoles", ctx, method)}
}

func (_c *Service_GetRoles_Call) Run(run func(ctx context.Context, method string)) *Service_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_GetRoles_Call) Return(_a0 []auth.RoleId, _a1 errs.ChatError) *Service_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetRoles_Call) RunAndReturn(run func(context.Context, string) ([]auth.RoleId, errs.ChatError)) *Service_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshSession provides a mock function with given fields: ctx, sessionId
func (_m *Service) RefreshSession(ctx context.Context, sessionId string) errs.ChatError {
	ret := _m.Called(ctx, sessionId)

	if len(ret) == 0 {
		panic("no return value specified for RefreshSession")
	}

	var r0 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string) errs.ChatError); ok {
		r0 = rf(ctx, sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.ChatError)
		}
	}

	return r0
}

// Service_RefreshSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshSession'
type Service_RefreshSession_Call struct {
	*mock.Call
}

// RefreshSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionId string
func (_e *Service_Expecter) RefreshSession(ctx interface{}, sessionId interface{}) *Service_RefreshSession_Call {
	return &Service_RefreshSession_Call{Call: _e.mock.On("RefreshSession", ctx, sessionId)}
}

func (_c *Service_RefreshSession_Call) Run(run func(ctx context.Context, sessionId string)) *Service_RefreshSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_RefreshSession_Call) Return(_a0 errs.ChatError) *Service_RefreshSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_RefreshSession_Call) RunAndReturn(run func(context.Context, string) errs.ChatError) *Service_RefreshSession_Call {
	_c.Call.Return(run)
	return _c
}

// SetRoles provides a mock function with given fields: method, roles
func (_m *Service) SetRoles(method string, roles []auth.RoleId) {
	_m.Called(method, roles)
}

// Service_SetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRoles'
type Service_SetRoles_Call struct {
	*mock.Call
}

// SetRoles is a helper method to define mock.On call
//   - method string
//   - roles []auth.RoleId
func (_e *Service_Expecter) SetRoles(method interface{}, roles interface{}) *Service_SetRoles_Call {
	return &Service_SetRoles_Call{Call: _e.mock.On("SetRoles", method, roles)}
}

func (_c *Service_SetRoles_Call) Run(run func(method string, roles []auth.RoleId)) *Service_SetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]auth.RoleId))
	})
	return _c
}

func (_c *Service_SetRoles_Call) Return() *Service_SetRoles_Call {
	_c.Call.Return()
	return _c
}

func (_c *Service_SetRoles_Call) RunAndReturn(run func(string, []auth.RoleId)) *Service_SetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
