// Code generated by mockery v2.42.1. DO NOT EDIT.

package sessionManager

import (
	context "context"

	errs "github.com/raffops/chat/pkg/errs"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// ExpireAt provides a mock function with given fields: ctx, tableName, key, at
func (_m *Repository) ExpireAt(ctx context.Context, tableName string, key string, at time.Time) errs.ChatError {
	ret := _m.Called(ctx, tableName, key, at)

	if len(ret) == 0 {
		panic("no return value specified for ExpireAt")
	}

	var r0 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) errs.ChatError); ok {
		r0 = rf(ctx, tableName, key, at)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.ChatError)
		}
	}

	return r0
}

// Repository_ExpireAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireAt'
type Repository_ExpireAt_Call struct {
	*mock.Call
}

// ExpireAt is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - key string
//   - at time.Time
func (_e *Repository_Expecter) ExpireAt(ctx interface{}, tableName interface{}, key interface{}, at interface{}) *Repository_ExpireAt_Call {
	return &Repository_ExpireAt_Call{Call: _e.mock.On("ExpireAt", ctx, tableName, key, at)}
}

func (_c *Repository_ExpireAt_Call) Run(run func(ctx context.Context, tableName string, key string, at time.Time)) *Repository_ExpireAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *Repository_ExpireAt_Call) Return(_a0 errs.ChatError) *Repository_ExpireAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_ExpireAt_Call) RunAndReturn(run func(context.Context, string, string, time.Time) errs.ChatError) *Repository_ExpireAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetTTL provides a mock function with given fields: ctx, tableName, key
func (_m *Repository) GetTTL(ctx context.Context, tableName string, key string) (time.Time, errs.ChatError) {
	ret := _m.Called(ctx, tableName, key)

	if len(ret) == 0 {
		panic("no return value specified for GetTTL")
	}

	var r0 time.Time
	var r1 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (time.Time, errs.ChatError)); ok {
		return rf(ctx, tableName, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) time.Time); ok {
		r0 = rf(ctx, tableName, key)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) errs.ChatError); ok {
		r1 = rf(ctx, tableName, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.ChatError)
		}
	}

	return r0, r1
}

// Repository_GetTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTTL'
type Repository_GetTTL_Call struct {
	*mock.Call
}

// GetTTL is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - key string
func (_e *Repository_Expecter) GetTTL(ctx interface{}, tableName interface{}, key interface{}) *Repository_GetTTL_Call {
	return &Repository_GetTTL_Call{Call: _e.mock.On("GetTTL", ctx, tableName, key)}
}

func (_c *Repository_GetTTL_Call) Run(run func(ctx context.Context, tableName string, key string)) *Repository_GetTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_GetTTL_Call) Return(_a0 time.Time, _a1 errs.ChatError) *Repository_GetTTL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetTTL_Call) RunAndReturn(run func(context.Context, string, string) (time.Time, errs.ChatError)) *Repository_GetTTL_Call {
	_c.Call.Return(run)
	return _c
}

// HashGet provides a mock function with given fields: ctx, tableName, key, columns
func (_m *Repository) HashGet(ctx context.Context, tableName string, key string, columns ...string) (map[string]interface{}, errs.ChatError) {
	_va := make([]interface{}, len(columns))
	for _i := range columns {
		_va[_i] = columns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, tableName, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HashGet")
	}

	var r0 map[string]interface{}
	var r1 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) (map[string]interface{}, errs.ChatError)); ok {
		return rf(ctx, tableName, key, columns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) map[string]interface{}); ok {
		r0 = rf(ctx, tableName, key, columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...string) errs.ChatError); ok {
		r1 = rf(ctx, tableName, key, columns...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.ChatError)
		}
	}

	return r0, r1
}

// Repository_HashGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashGet'
type Repository_HashGet_Call struct {
	*mock.Call
}

// HashGet is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - key string
//   - columns ...string
func (_e *Repository_Expecter) HashGet(ctx interface{}, tableName interface{}, key interface{}, columns ...interface{}) *Repository_HashGet_Call {
	return &Repository_HashGet_Call{Call: _e.mock.On("HashGet",
		append([]interface{}{ctx, tableName, key}, columns...)...)}
}

func (_c *Repository_HashGet_Call) Run(run func(ctx context.Context, tableName string, key string, columns ...string)) *Repository_HashGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *Repository_HashGet_Call) Return(_a0 map[string]interface{}, _a1 errs.ChatError) *Repository_HashGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_HashGet_Call) RunAndReturn(run func(context.Context, string, string, ...string) (map[string]interface{}, errs.ChatError)) *Repository_HashGet_Call {
	_c.Call.Return(run)
	return _c
}

// HashGetEncrypted provides a mock function with given fields: ctx, tableName, key, secret
func (_m *Repository) HashGetEncrypted(ctx context.Context, tableName string, key string, secret string) (map[string]interface{}, errs.ChatError) {
	ret := _m.Called(ctx, tableName, key, secret)

	if len(ret) == 0 {
		panic("no return value specified for HashGetEncrypted")
	}

	var r0 map[string]interface{}
	var r1 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (map[string]interface{}, errs.ChatError)); ok {
		return rf(ctx, tableName, key, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) map[string]interface{}); ok {
		r0 = rf(ctx, tableName, key, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) errs.ChatError); ok {
		r1 = rf(ctx, tableName, key, secret)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.ChatError)
		}
	}

	return r0, r1
}

// Repository_HashGetEncrypted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashGetEncrypted'
type Repository_HashGetEncrypted_Call struct {
	*mock.Call
}

// HashGetEncrypted is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - key string
//   - secret string
func (_e *Repository_Expecter) HashGetEncrypted(ctx interface{}, tableName interface{}, key interface{}, secret interface{}) *Repository_HashGetEncrypted_Call {
	return &Repository_HashGetEncrypted_Call{Call: _e.mock.On("HashGetEncrypted", ctx, tableName, key, secret)}
}

func (_c *Repository_HashGetEncrypted_Call) Run(run func(ctx context.Context, tableName string, key string, secret string)) *Repository_HashGetEncrypted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Repository_HashGetEncrypted_Call) Return(_a0 map[string]interface{}, _a1 errs.ChatError) *Repository_HashGetEncrypted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_HashGetEncrypted_Call) RunAndReturn(run func(context.Context, string, string, string) (map[string]interface{}, errs.ChatError)) *Repository_HashGetEncrypted_Call {
	_c.Call.Return(run)
	return _c
}

// HashSet provides a mock function with given fields: ctx, tableName, key, values
func (_m *Repository) HashSet(ctx context.Context, tableName string, key string, values map[string]interface{}) errs.ChatError {
	ret := _m.Called(ctx, tableName, key, values)

	if len(ret) == 0 {
		panic("no return value specified for HashSet")
	}

	var r0 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) errs.ChatError); ok {
		r0 = rf(ctx, tableName, key, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.ChatError)
		}
	}

	return r0
}

// Repository_HashSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashSet'
type Repository_HashSet_Call struct {
	*mock.Call
}

// HashSet is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - key string
//   - values map[string]interface{}
func (_e *Repository_Expecter) HashSet(ctx interface{}, tableName interface{}, key interface{}, values interface{}) *Repository_HashSet_Call {
	return &Repository_HashSet_Call{Call: _e.mock.On("HashSet", ctx, tableName, key, values)}
}

func (_c *Repository_HashSet_Call) Run(run func(ctx context.Context, tableName string, key string, values map[string]interface{})) *Repository_HashSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]interface{}))
	})
	return _c
}

func (_c *Repository_HashSet_Call) Return(_a0 errs.ChatError) *Repository_HashSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_HashSet_Call) RunAndReturn(run func(context.Context, string, string, map[string]interface{}) errs.ChatError) *Repository_HashSet_Call {
	_c.Call.Return(run)
	return _c
}

// HashSetEncrypted provides a mock function with given fields: ctx, tableName, key, secret, values
func (_m *Repository) HashSetEncrypted(ctx context.Context, tableName string, key string, secret string, values map[string]interface{}) errs.ChatError {
	ret := _m.Called(ctx, tableName, key, secret, values)

	if len(ret) == 0 {
		panic("no return value specified for HashSetEncrypted")
	}

	var r0 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, map[string]interface{}) errs.ChatError); ok {
		r0 = rf(ctx, tableName, key, secret, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.ChatError)
		}
	}

	return r0
}

// Repository_HashSetEncrypted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashSetEncrypted'
type Repository_HashSetEncrypted_Call struct {
	*mock.Call
}

// HashSetEncrypted is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
//   - key string
//   - secret string
//   - values map[string]interface{}
func (_e *Repository_Expecter) HashSetEncrypted(ctx interface{}, tableName interface{}, key interface{}, secret interface{}, values interface{}) *Repository_HashSetEncrypted_Call {
	return &Repository_HashSetEncrypted_Call{Call: _e.mock.On("HashSetEncrypted", ctx, tableName, key, secret, values)}
}

func (_c *Repository_HashSetEncrypted_Call) Run(run func(ctx context.Context, tableName string, key string, secret string, values map[string]interface{})) *Repository_HashSetEncrypted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(map[string]interface{}))
	})
	return _c
}

func (_c *Repository_HashSetEncrypted_Call) Return(_a0 errs.ChatError) *Repository_HashSetEncrypted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_HashSetEncrypted_Call) RunAndReturn(run func(context.Context, string, string, string, map[string]interface{}) errs.ChatError) *Repository_HashSetEncrypted_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
