// Code generated by mockery v2.42.1. DO NOT EDIT.

package user

import (
	context "context"

	errs "github.com/raffops/chat/pkg/errs"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	user "github.com/raffops/auth/internal/app/user/models"
)

// WriterRepository is an autogenerated mock type for the WriterRepository type
type WriterRepository struct {
	mock.Mock
}

type WriterRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *WriterRepository) EXPECT() *WriterRepository_Expecter {
	return &WriterRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, tx, u
func (_m *WriterRepository) CreateUser(ctx context.Context, tx *sql.Tx, u user.User) (user.User, errs.ChatError) {
	ret := _m.Called(ctx, tx, u)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 user.User
	var r1 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, user.User) (user.User, errs.ChatError)); ok {
		return rf(ctx, tx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, user.User) user.User); ok {
		r0 = rf(ctx, tx, u)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, user.User) errs.ChatError); ok {
		r1 = rf(ctx, tx, u)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.ChatError)
		}
	}

	return r0, r1
}

// WriterRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type WriterRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - u user.User
func (_e *WriterRepository_Expecter) CreateUser(ctx interface{}, tx interface{}, u interface{}) *WriterRepository_CreateUser_Call {
	return &WriterRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, tx, u)}
}

func (_c *WriterRepository_CreateUser_Call) Run(run func(ctx context.Context, tx *sql.Tx, u user.User)) *WriterRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(user.User))
	})
	return _c
}

func (_c *WriterRepository_CreateUser_Call) Return(_a0 user.User, _a1 errs.ChatError) *WriterRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WriterRepository_CreateUser_Call) RunAndReturn(run func(context.Context, *sql.Tx, user.User) (user.User, errs.ChatError)) *WriterRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, tx, u
func (_m *WriterRepository) DeleteUser(ctx context.Context, tx *sql.Tx, u user.User) (user.User, errs.ChatError) {
	ret := _m.Called(ctx, tx, u)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 user.User
	var r1 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, user.User) (user.User, errs.ChatError)); ok {
		return rf(ctx, tx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, user.User) user.User); ok {
		r0 = rf(ctx, tx, u)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, user.User) errs.ChatError); ok {
		r1 = rf(ctx, tx, u)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.ChatError)
		}
	}

	return r0, r1
}

// WriterRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type WriterRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - u user.User
func (_e *WriterRepository_Expecter) DeleteUser(ctx interface{}, tx interface{}, u interface{}) *WriterRepository_DeleteUser_Call {
	return &WriterRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, tx, u)}
}

func (_c *WriterRepository_DeleteUser_Call) Run(run func(ctx context.Context, tx *sql.Tx, u user.User)) *WriterRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(user.User))
	})
	return _c
}

func (_c *WriterRepository_DeleteUser_Call) Return(_a0 user.User, _a1 errs.ChatError) *WriterRepository_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WriterRepository_DeleteUser_Call) RunAndReturn(run func(context.Context, *sql.Tx, user.User) (user.User, errs.ChatError)) *WriterRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields:
func (_m *WriterRepository) GetDB() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// WriterRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type WriterRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
func (_e *WriterRepository_Expecter) GetDB() *WriterRepository_GetDB_Call {
	return &WriterRepository_GetDB_Call{Call: _e.mock.On("GetDB")}
}

func (_c *WriterRepository_GetDB_Call) Run(run func()) *WriterRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WriterRepository_GetDB_Call) Return(_a0 *sql.DB) *WriterRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WriterRepository_GetDB_Call) RunAndReturn(run func() *sql.DB) *WriterRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, tx, u
func (_m *WriterRepository) UpdateUser(ctx context.Context, tx *sql.Tx, u user.User) (user.User, errs.ChatError) {
	ret := _m.Called(ctx, tx, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 user.User
	var r1 errs.ChatError
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, user.User) (user.User, errs.ChatError)); ok {
		return rf(ctx, tx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, user.User) user.User); ok {
		r0 = rf(ctx, tx, u)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, user.User) errs.ChatError); ok {
		r1 = rf(ctx, tx, u)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.ChatError)
		}
	}

	return r0, r1
}

// WriterRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type WriterRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - u user.User
func (_e *WriterRepository_Expecter) UpdateUser(ctx interface{}, tx interface{}, u interface{}) *WriterRepository_UpdateUser_Call {
	return &WriterRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, tx, u)}
}

func (_c *WriterRepository_UpdateUser_Call) Run(run func(ctx context.Context, tx *sql.Tx, u user.User)) *WriterRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(user.User))
	})
	return _c
}

func (_c *WriterRepository_UpdateUser_Call) Return(_a0 user.User, _a1 errs.ChatError) *WriterRepository_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WriterRepository_UpdateUser_Call) RunAndReturn(run func(context.Context, *sql.Tx, user.User) (user.User, errs.ChatError)) *WriterRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriterRepository creates a new instance of WriterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriterRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WriterRepository {
	mock := &WriterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
