// Code generated by mockery v2.42.1. DO NOT EDIT.

package auth

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

type Controller_Expecter struct {
	mock *mock.Mock
}

func (_m *Controller) EXPECT() *Controller_Expecter {
	return &Controller_Expecter{mock: &_m.Mock}
}

// Callback provides a mock function with given fields: w, r
func (_m *Controller) Callback(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// Controller_Callback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Callback'
type Controller_Callback_Call struct {
	*mock.Call
}

// Callback is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *Controller_Expecter) Callback(w interface{}, r interface{}) *Controller_Callback_Call {
	return &Controller_Callback_Call{Call: _e.mock.On("Callback", w, r)}
}

func (_c *Controller_Callback_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *Controller_Callback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Controller_Callback_Call) Return() *Controller_Callback_Call {
	_c.Call.Return()
	return _c
}

func (_c *Controller_Callback_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Controller_Callback_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: w, r
func (_m *Controller) Login(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// Controller_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Controller_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *Controller_Expecter) Login(w interface{}, r interface{}) *Controller_Login_Call {
	return &Controller_Login_Call{Call: _e.mock.On("Login", w, r)}
}

func (_c *Controller_Login_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *Controller_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Controller_Login_Call) Return() *Controller_Login_Call {
	_c.Call.Return()
	return _c
}

func (_c *Controller_Login_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Controller_Login_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: w, r
func (_m *Controller) SignUp(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// Controller_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type Controller_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *Controller_Expecter) SignUp(w interface{}, r interface{}) *Controller_SignUp_Call {
	return &Controller_SignUp_Call{Call: _e.mock.On("SignUp", w, r)}
}

func (_c *Controller_SignUp_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *Controller_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Controller_SignUp_Call) Return() *Controller_SignUp_Call {
	_c.Call.Return()
	return _c
}

func (_c *Controller_SignUp_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Controller_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
